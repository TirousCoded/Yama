#pragma once
#include <optional>
#include <taul/logger.h>
#include <taul/grammar.h>
#if TAUL_SRCGEN_IMPLEMENTATION
#include <taul/spec.h>
#include <taul/load.h>
#endif

// write "#define TAUL_SRCGEN_IMPLEMENTATION 1" in a *.cpp file to host the implementation,
// placing it prior to the #include for the generated fetcher header file
namespace taul::fetchers {
    taul::grammar yama() noexcept;
}

#if TAUL_SRCGEN_IMPLEMENTATION
static taul::grammar _TAUL_SRCGEN_init_yama() {
    auto lgr = taul::make_stderr_logger();
    taul::spec_writer sw{};
    sw.pos(2244);
    sw.lpr_decl(taul::str::lit("END_OF_WORD"));
    sw.pos(2327);
    sw.lpr_decl(taul::str::lit("TRUE"));
    sw.pos(2387);
    sw.lpr_decl(taul::str::lit("FALSE"));
    sw.pos(2448);
    sw.lpr_decl(taul::str::lit("INF"));
    sw.pos(2507);
    sw.lpr_decl(taul::str::lit("NAN"));
    sw.pos(2566);
    sw.lpr_decl(taul::str::lit("VAR"));
    sw.pos(2625);
    sw.lpr_decl(taul::str::lit("FN"));
    sw.pos(2683);
    sw.lpr_decl(taul::str::lit("IF"));
    sw.pos(2741);
    sw.lpr_decl(taul::str::lit("ELSE"));
    sw.pos(2801);
    sw.lpr_decl(taul::str::lit("LOOP"));
    sw.pos(2861);
    sw.lpr_decl(taul::str::lit("BREAK"));
    sw.pos(2922);
    sw.lpr_decl(taul::str::lit("CONTINUE"));
    sw.pos(2986);
    sw.lpr_decl(taul::str::lit("RETURN"));
    sw.pos(3069);
    sw.lpr_decl(taul::str::lit("IDENTIFIER"));
    sw.pos(3505);
    sw.lpr_decl(taul::str::lit("DIGITS_DEC"));
    sw.pos(3568);
    sw.lpr_decl(taul::str::lit("DIGITS_HEX"));
    sw.pos(3643);
    sw.lpr_decl(taul::str::lit("DIGITS_BIN"));
    sw.pos(3706);
    sw.lpr_decl(taul::str::lit("EXPONENT"));
    sw.pos(3771);
    sw.lpr_decl(taul::str::lit("FLOAT"));
    sw.pos(3911);
    sw.lpr_decl(taul::str::lit("INT_DEC"));
    sw.pos(3980);
    sw.lpr_decl(taul::str::lit("INT_HEX"));
    sw.pos(4054);
    sw.lpr_decl(taul::str::lit("INT_BIN"));
    sw.pos(4128);
    sw.lpr_decl(taul::str::lit("UINT_DEC"));
    sw.pos(4196);
    sw.lpr_decl(taul::str::lit("UINT_HEX"));
    sw.pos(4269);
    sw.lpr_decl(taul::str::lit("UINT_BIN"));
    sw.pos(4342);
    sw.lpr_decl(taul::str::lit("CHAR"));
    sw.pos(4458);
    sw.lpr_decl(taul::str::lit("R_ARROW"));
    sw.pos(4558);
    sw.lpr_decl(taul::str::lit("ASSIGN"));
    sw.pos(4605);
    sw.lpr_decl(taul::str::lit("L_ROUND"));
    sw.pos(4650);
    sw.lpr_decl(taul::str::lit("R_ROUND"));
    sw.pos(4695);
    sw.lpr_decl(taul::str::lit("L_CURLY"));
    sw.pos(4740);
    sw.lpr_decl(taul::str::lit("R_CURLY"));
    sw.pos(4787);
    sw.lpr_decl(taul::str::lit("COMMA"));
    sw.pos(4832);
    sw.lpr_decl(taul::str::lit("COLON"));
    sw.pos(4877);
    sw.lpr_decl(taul::str::lit("SEMI"));
    sw.pos(4957);
    sw.lpr_decl(taul::str::lit("WHITESPACE"));
    sw.pos(5005);
    sw.lpr_decl(taul::str::lit("NEWLINE"));
    sw.pos(5066);
    sw.lpr_decl(taul::str::lit("SL_COMMENT"));
    sw.pos(5146);
    sw.ppr_decl(taul::str::lit("Chunk"));
    sw.pos(5274);
    sw.ppr_decl(taul::str::lit("Decl"));
    sw.pos(5442);
    sw.ppr_decl(taul::str::lit("VarDecl"));
    sw.pos(5522);
    sw.ppr_decl(taul::str::lit("FnDecl"));
    sw.pos(5593);
    sw.ppr_decl(taul::str::lit("CallSig"));
    sw.pos(5694);
    sw.ppr_decl(taul::str::lit("ParamDecl"));
    sw.pos(5757);
    sw.ppr_decl(taul::str::lit("Result"));
    sw.pos(5817);
    sw.ppr_decl(taul::str::lit("Block"));
    sw.pos(6028);
    sw.ppr_decl(taul::str::lit("Stmt"));
    sw.pos(6406);
    sw.ppr_decl(taul::str::lit("ExprStmt"));
    sw.pos(6486);
    sw.ppr_decl(taul::str::lit("IfStmt"));
    sw.pos(6586);
    sw.ppr_decl(taul::str::lit("LoopStmt"));
    sw.pos(6638);
    sw.ppr_decl(taul::str::lit("BreakStmt"));
    sw.pos(6690);
    sw.ppr_decl(taul::str::lit("ContinueStmt"));
    sw.pos(6745);
    sw.ppr_decl(taul::str::lit("ReturnStmt"));
    sw.pos(7215);
    sw.ppr_decl(taul::str::lit("Expr"));
    sw.pos(7582);
    sw.ppr_decl(taul::str::lit("PrimaryExpr"));
    sw.pos(7778);
    sw.ppr_decl(taul::str::lit("Lit"));
    sw.pos(8058);
    sw.ppr_decl(taul::str::lit("IntLit"));
    sw.pos(8127);
    sw.ppr_decl(taul::str::lit("UIntLit"));
    sw.pos(8199);
    sw.ppr_decl(taul::str::lit("FloatLit"));
    sw.pos(8258);
    sw.ppr_decl(taul::str::lit("BoolLit"));
    sw.pos(8312);
    sw.ppr_decl(taul::str::lit("CharLit"));
    sw.pos(8360);
    sw.ppr_decl(taul::str::lit("Assign"));
    sw.pos(8413);
    sw.ppr_decl(taul::str::lit("Args"));
    sw.pos(8498);
    sw.ppr_decl(taul::str::lit("TypeAnnot"));
    sw.pos(8572);
    sw.ppr_decl(taul::str::lit("TypeSpec"));
    sw.pos(2244);
    sw.lpr(taul::str::lit("END_OF_WORD"), taul::qualifier::support);
    sw.pos(2244);
    sw.lookahead_not();
    sw.pos(2245);
    sw.charset(taul::str::lit("0-9a-zA-Z_"));
    sw.pos(2244);
    sw.close();
    sw.pos(2258);
    sw.alternative();
    sw.pos(2260);
    sw.end();
    sw.pos(2244);
    sw.close();
    sw.pos(2327);
    sw.lpr(taul::str::lit("TRUE"), taul::qualifier::none);
    sw.pos(2327);
    sw.string(taul::str::lit("true"));
    sw.pos(2334);
    sw.name(taul::str::lit("END_OF_WORD"));
    sw.pos(2327);
    sw.close();
    sw.pos(2387);
    sw.lpr(taul::str::lit("FALSE"), taul::qualifier::none);
    sw.pos(2387);
    sw.string(taul::str::lit("false"));
    sw.pos(2395);
    sw.name(taul::str::lit("END_OF_WORD"));
    sw.pos(2387);
    sw.close();
    sw.pos(2448);
    sw.lpr(taul::str::lit("INF"), taul::qualifier::none);
    sw.pos(2448);
    sw.string(taul::str::lit("inf"));
    sw.pos(2454);
    sw.name(taul::str::lit("END_OF_WORD"));
    sw.pos(2448);
    sw.close();
    sw.pos(2507);
    sw.lpr(taul::str::lit("NAN"), taul::qualifier::none);
    sw.pos(2507);
    sw.string(taul::str::lit("nan"));
    sw.pos(2513);
    sw.name(taul::str::lit("END_OF_WORD"));
    sw.pos(2507);
    sw.close();
    sw.pos(2566);
    sw.lpr(taul::str::lit("VAR"), taul::qualifier::none);
    sw.pos(2566);
    sw.string(taul::str::lit("var"));
    sw.pos(2572);
    sw.name(taul::str::lit("END_OF_WORD"));
    sw.pos(2566);
    sw.close();
    sw.pos(2625);
    sw.lpr(taul::str::lit("FN"), taul::qualifier::none);
    sw.pos(2625);
    sw.string(taul::str::lit("fn"));
    sw.pos(2630);
    sw.name(taul::str::lit("END_OF_WORD"));
    sw.pos(2625);
    sw.close();
    sw.pos(2683);
    sw.lpr(taul::str::lit("IF"), taul::qualifier::none);
    sw.pos(2683);
    sw.string(taul::str::lit("if"));
    sw.pos(2688);
    sw.name(taul::str::lit("END_OF_WORD"));
    sw.pos(2683);
    sw.close();
    sw.pos(2741);
    sw.lpr(taul::str::lit("ELSE"), taul::qualifier::none);
    sw.pos(2741);
    sw.string(taul::str::lit("else"));
    sw.pos(2748);
    sw.name(taul::str::lit("END_OF_WORD"));
    sw.pos(2741);
    sw.close();
    sw.pos(2801);
    sw.lpr(taul::str::lit("LOOP"), taul::qualifier::none);
    sw.pos(2801);
    sw.string(taul::str::lit("loop"));
    sw.pos(2808);
    sw.name(taul::str::lit("END_OF_WORD"));
    sw.pos(2801);
    sw.close();
    sw.pos(2861);
    sw.lpr(taul::str::lit("BREAK"), taul::qualifier::none);
    sw.pos(2861);
    sw.string(taul::str::lit("break"));
    sw.pos(2869);
    sw.name(taul::str::lit("END_OF_WORD"));
    sw.pos(2861);
    sw.close();
    sw.pos(2922);
    sw.lpr(taul::str::lit("CONTINUE"), taul::qualifier::none);
    sw.pos(2922);
    sw.string(taul::str::lit("continue"));
    sw.pos(2933);
    sw.name(taul::str::lit("END_OF_WORD"));
    sw.pos(2922);
    sw.close();
    sw.pos(2986);
    sw.lpr(taul::str::lit("RETURN"), taul::qualifier::none);
    sw.pos(2986);
    sw.string(taul::str::lit("return"));
    sw.pos(2995);
    sw.name(taul::str::lit("END_OF_WORD"));
    sw.pos(2986);
    sw.close();
    sw.pos(3069);
    sw.lpr(taul::str::lit("IDENTIFIER"), taul::qualifier::none);
    sw.pos(3069);
    sw.charset(taul::str::lit("a-zA-Z_"));
    sw.pos(3091);
    sw.kleene_star();
    sw.pos(3079);
    sw.charset(taul::str::lit("0-9a-zA-Z_"));
    sw.pos(3091);
    sw.close();
    sw.pos(3069);
    sw.close();
    sw.pos(3505);
    sw.lpr(taul::str::lit("DIGITS_DEC"), taul::qualifier::support);
    sw.pos(3505);
    sw.charset(taul::str::lit("0-9"));
    sw.pos(3525);
    sw.kleene_star();
    sw.pos(3511);
    sw.sequence();
    sw.pos(3516);
    sw.optional();
    sw.pos(3513);
    sw.string(taul::str::lit("_"));
    sw.pos(3516);
    sw.close();
    sw.pos(3518);
    sw.charset(taul::str::lit("0-9"));
    sw.pos(3511);
    sw.close();
    sw.pos(3525);
    sw.close();
    sw.pos(3505);
    sw.close();
    sw.pos(3568);
    sw.lpr(taul::str::lit("DIGITS_HEX"), taul::qualifier::support);
    sw.pos(3568);
    sw.charset(taul::str::lit("0-9a-fA-F"));
    sw.pos(3600);
    sw.kleene_star();
    sw.pos(3580);
    sw.sequence();
    sw.pos(3585);
    sw.optional();
    sw.pos(3582);
    sw.string(taul::str::lit("_"));
    sw.pos(3585);
    sw.close();
    sw.pos(3587);
    sw.charset(taul::str::lit("0-9a-fA-F"));
    sw.pos(3580);
    sw.close();
    sw.pos(3600);
    sw.close();
    sw.pos(3568);
    sw.close();
    sw.pos(3643);
    sw.lpr(taul::str::lit("DIGITS_BIN"), taul::qualifier::support);
    sw.pos(3643);
    sw.charset(taul::str::lit("01"));
    sw.pos(3661);
    sw.kleene_star();
    sw.pos(3648);
    sw.sequence();
    sw.pos(3653);
    sw.optional();
    sw.pos(3650);
    sw.string(taul::str::lit("_"));
    sw.pos(3653);
    sw.close();
    sw.pos(3655);
    sw.charset(taul::str::lit("01"));
    sw.pos(3648);
    sw.close();
    sw.pos(3661);
    sw.close();
    sw.pos(3643);
    sw.close();
    sw.pos(3706);
    sw.lpr(taul::str::lit("EXPONENT"), taul::qualifier::support);
    sw.pos(3706);
    sw.string(taul::str::lit("e"));
    sw.pos(3715);
    sw.optional();
    sw.pos(3710);
    sw.charset(taul::str::lit("+\\-"));
    sw.pos(3715);
    sw.close();
    sw.pos(3717);
    sw.name(taul::str::lit("DIGITS_DEC"));
    sw.pos(3706);
    sw.close();
    sw.pos(3771);
    sw.lpr(taul::str::lit("FLOAT"), taul::qualifier::none);
    sw.pos(3774);
    sw.optional();
    sw.pos(3771);
    sw.string(taul::str::lit("-"));
    sw.pos(3774);
    sw.close();
    sw.pos(3776);
    sw.sequence();
    sw.pos(3778);
    sw.name(taul::str::lit("DIGITS_DEC"));
    sw.pos(3789);
    sw.sequence();
    sw.pos(3791);
    sw.string(taul::str::lit("."));
    sw.pos(3795);
    sw.name(taul::str::lit("DIGITS_DEC"));
    sw.pos(3814);
    sw.optional();
    sw.pos(3806);
    sw.name(taul::str::lit("EXPONENT"));
    sw.pos(3814);
    sw.close();
    sw.pos(3816);
    sw.alternative();
    sw.pos(3818);
    sw.name(taul::str::lit("EXPONENT"));
    sw.pos(3789);
    sw.close();
    sw.pos(3829);
    sw.alternative();
    sw.pos(3831);
    sw.string(taul::str::lit("."));
    sw.pos(3835);
    sw.name(taul::str::lit("DIGITS_DEC"));
    sw.pos(3854);
    sw.optional();
    sw.pos(3846);
    sw.name(taul::str::lit("EXPONENT"));
    sw.pos(3854);
    sw.close();
    sw.pos(3776);
    sw.close();
    sw.pos(3858);
    sw.name(taul::str::lit("END_OF_WORD"));
    sw.pos(3771);
    sw.close();
    sw.pos(3911);
    sw.lpr(taul::str::lit("INT_DEC"), taul::qualifier::none);
    sw.pos(3914);
    sw.optional();
    sw.pos(3911);
    sw.string(taul::str::lit("-"));
    sw.pos(3914);
    sw.close();
    sw.pos(3916);
    sw.name(taul::str::lit("DIGITS_DEC"));
    sw.pos(3927);
    sw.name(taul::str::lit("END_OF_WORD"));
    sw.pos(3911);
    sw.close();
    sw.pos(3980);
    sw.lpr(taul::str::lit("INT_HEX"), taul::qualifier::none);
    sw.pos(3983);
    sw.optional();
    sw.pos(3980);
    sw.string(taul::str::lit("-"));
    sw.pos(3983);
    sw.close();
    sw.pos(3985);
    sw.string(taul::str::lit("0x"));
    sw.pos(3990);
    sw.name(taul::str::lit("DIGITS_HEX"));
    sw.pos(4001);
    sw.name(taul::str::lit("END_OF_WORD"));
    sw.pos(3980);
    sw.close();
    sw.pos(4054);
    sw.lpr(taul::str::lit("INT_BIN"), taul::qualifier::none);
    sw.pos(4057);
    sw.optional();
    sw.pos(4054);
    sw.string(taul::str::lit("-"));
    sw.pos(4057);
    sw.close();
    sw.pos(4059);
    sw.string(taul::str::lit("0b"));
    sw.pos(4064);
    sw.name(taul::str::lit("DIGITS_BIN"));
    sw.pos(4075);
    sw.name(taul::str::lit("END_OF_WORD"));
    sw.pos(4054);
    sw.close();
    sw.pos(4128);
    sw.lpr(taul::str::lit("UINT_DEC"), taul::qualifier::none);
    sw.pos(4128);
    sw.name(taul::str::lit("DIGITS_DEC"));
    sw.pos(4139);
    sw.string(taul::str::lit("u"));
    sw.pos(4143);
    sw.name(taul::str::lit("END_OF_WORD"));
    sw.pos(4128);
    sw.close();
    sw.pos(4196);
    sw.lpr(taul::str::lit("UINT_HEX"), taul::qualifier::none);
    sw.pos(4196);
    sw.string(taul::str::lit("0x"));
    sw.pos(4201);
    sw.name(taul::str::lit("DIGITS_HEX"));
    sw.pos(4212);
    sw.string(taul::str::lit("u"));
    sw.pos(4216);
    sw.name(taul::str::lit("END_OF_WORD"));
    sw.pos(4196);
    sw.close();
    sw.pos(4269);
    sw.lpr(taul::str::lit("UINT_BIN"), taul::qualifier::none);
    sw.pos(4269);
    sw.string(taul::str::lit("0b"));
    sw.pos(4274);
    sw.name(taul::str::lit("DIGITS_BIN"));
    sw.pos(4285);
    sw.string(taul::str::lit("u"));
    sw.pos(4289);
    sw.name(taul::str::lit("END_OF_WORD"));
    sw.pos(4269);
    sw.close();
    sw.pos(4342);
    sw.lpr(taul::str::lit("CHAR"), taul::qualifier::none);
    sw.pos(4342);
    sw.string(taul::str::lit("\\'"));
    sw.pos(4369);
    sw.kleene_star();
    sw.pos(4347);
    sw.sequence();
    sw.pos(4349);
    sw.string(taul::str::lit("\\\\"));
    sw.pos(4354);
    sw.any();
    sw.pos(4358);
    sw.alternative();
    sw.pos(4360);
    sw.not0();
    sw.pos(4361);
    sw.charset(taul::str::lit("\\'\\\\"));
    sw.pos(4360);
    sw.close();
    sw.pos(4347);
    sw.close();
    sw.pos(4369);
    sw.close();
    sw.pos(4371);
    sw.string(taul::str::lit("\\'"));
    sw.pos(4342);
    sw.close();
    sw.pos(4458);
    sw.lpr(taul::str::lit("R_ARROW"), taul::qualifier::none);
    sw.pos(4458);
    sw.string(taul::str::lit("->"));
    sw.pos(4458);
    sw.close();
    sw.pos(4558);
    sw.lpr(taul::str::lit("ASSIGN"), taul::qualifier::none);
    sw.pos(4558);
    sw.string(taul::str::lit("="));
    sw.pos(4558);
    sw.close();
    sw.pos(4605);
    sw.lpr(taul::str::lit("L_ROUND"), taul::qualifier::none);
    sw.pos(4605);
    sw.string(taul::str::lit("("));
    sw.pos(4605);
    sw.close();
    sw.pos(4650);
    sw.lpr(taul::str::lit("R_ROUND"), taul::qualifier::none);
    sw.pos(4650);
    sw.string(taul::str::lit(")"));
    sw.pos(4650);
    sw.close();
    sw.pos(4695);
    sw.lpr(taul::str::lit("L_CURLY"), taul::qualifier::none);
    sw.pos(4695);
    sw.string(taul::str::lit("{"));
    sw.pos(4695);
    sw.close();
    sw.pos(4740);
    sw.lpr(taul::str::lit("R_CURLY"), taul::qualifier::none);
    sw.pos(4740);
    sw.string(taul::str::lit("}"));
    sw.pos(4740);
    sw.close();
    sw.pos(4787);
    sw.lpr(taul::str::lit("COMMA"), taul::qualifier::none);
    sw.pos(4787);
    sw.string(taul::str::lit(","));
    sw.pos(4787);
    sw.close();
    sw.pos(4832);
    sw.lpr(taul::str::lit("COLON"), taul::qualifier::none);
    sw.pos(4832);
    sw.string(taul::str::lit(":"));
    sw.pos(4832);
    sw.close();
    sw.pos(4877);
    sw.lpr(taul::str::lit("SEMI"), taul::qualifier::none);
    sw.pos(4877);
    sw.string(taul::str::lit(";"));
    sw.pos(4877);
    sw.close();
    sw.pos(4957);
    sw.lpr(taul::str::lit("WHITESPACE"), taul::qualifier::skip);
    sw.pos(4962);
    sw.kleene_plus();
    sw.pos(4957);
    sw.charset(taul::str::lit(" \\t"));
    sw.pos(4962);
    sw.close();
    sw.pos(4957);
    sw.close();
    sw.pos(5005);
    sw.lpr(taul::str::lit("NEWLINE"), taul::qualifier::skip);
    sw.pos(5005);
    sw.string(taul::str::lit("\\n"));
    sw.pos(5010);
    sw.alternative();
    sw.pos(5012);
    sw.string(taul::str::lit("\\r"));
    sw.pos(5021);
    sw.optional();
    sw.pos(5017);
    sw.string(taul::str::lit("\\n"));
    sw.pos(5021);
    sw.close();
    sw.pos(5005);
    sw.close();
    sw.pos(5066);
    sw.lpr(taul::str::lit("SL_COMMENT"), taul::qualifier::skip);
    sw.pos(5066);
    sw.string(taul::str::lit("//"));
    sw.pos(5078);
    sw.kleene_star();
    sw.pos(5071);
    sw.not0();
    sw.pos(5072);
    sw.charset(taul::str::lit("\\r\\n"));
    sw.pos(5071);
    sw.close();
    sw.pos(5078);
    sw.close();
    sw.pos(5066);
    sw.close();
    sw.pos(5146);
    sw.ppr(taul::str::lit("Chunk"), taul::qualifier::none);
    sw.pos(5150);
    sw.kleene_star();
    sw.pos(5146);
    sw.name(taul::str::lit("Decl"));
    sw.pos(5150);
    sw.close();
    sw.pos(5152);
    sw.end();
    sw.pos(5146);
    sw.close();
    sw.pos(5274);
    sw.ppr(taul::str::lit("Decl"), taul::qualifier::none);
    sw.pos(5274);
    sw.name(taul::str::lit("VarDecl"));
    sw.pos(5319);
    sw.alternative();
    sw.pos(5321);
    sw.name(taul::str::lit("FnDecl"));
    sw.pos(5274);
    sw.close();
    sw.pos(5442);
    sw.ppr(taul::str::lit("VarDecl"), taul::qualifier::none);
    sw.pos(5442);
    sw.name(taul::str::lit("VAR"));
    sw.pos(5446);
    sw.name(taul::str::lit("IDENTIFIER"));
    sw.pos(5466);
    sw.optional();
    sw.pos(5457);
    sw.name(taul::str::lit("TypeAnnot"));
    sw.pos(5466);
    sw.close();
    sw.pos(5474);
    sw.optional();
    sw.pos(5468);
    sw.name(taul::str::lit("Assign"));
    sw.pos(5474);
    sw.close();
    sw.pos(5476);
    sw.name(taul::str::lit("SEMI"));
    sw.pos(5442);
    sw.close();
    sw.pos(5522);
    sw.ppr(taul::str::lit("FnDecl"), taul::qualifier::none);
    sw.pos(5522);
    sw.name(taul::str::lit("FN"));
    sw.pos(5525);
    sw.name(taul::str::lit("IDENTIFIER"));
    sw.pos(5536);
    sw.name(taul::str::lit("CallSig"));
    sw.pos(5544);
    sw.name(taul::str::lit("Block"));
    sw.pos(5522);
    sw.close();
    sw.pos(5593);
    sw.ppr(taul::str::lit("CallSig"), taul::qualifier::none);
    sw.pos(5593);
    sw.name(taul::str::lit("L_ROUND"));
    sw.pos(5635);
    sw.optional();
    sw.pos(5601);
    sw.sequence();
    sw.pos(5603);
    sw.name(taul::str::lit("ParamDecl"));
    sw.pos(5632);
    sw.kleene_star();
    sw.pos(5613);
    sw.sequence();
    sw.pos(5615);
    sw.name(taul::str::lit("COMMA"));
    sw.pos(5621);
    sw.name(taul::str::lit("ParamDecl"));
    sw.pos(5613);
    sw.close();
    sw.pos(5632);
    sw.close();
    sw.pos(5601);
    sw.close();
    sw.pos(5635);
    sw.close();
    sw.pos(5637);
    sw.name(taul::str::lit("R_ROUND"));
    sw.pos(5651);
    sw.optional();
    sw.pos(5645);
    sw.name(taul::str::lit("Result"));
    sw.pos(5651);
    sw.close();
    sw.pos(5593);
    sw.close();
    sw.pos(5694);
    sw.ppr(taul::str::lit("ParamDecl"), taul::qualifier::none);
    sw.pos(5694);
    sw.name(taul::str::lit("IDENTIFIER"));
    sw.pos(5714);
    sw.optional();
    sw.pos(5705);
    sw.name(taul::str::lit("TypeAnnot"));
    sw.pos(5714);
    sw.close();
    sw.pos(5694);
    sw.close();
    sw.pos(5757);
    sw.ppr(taul::str::lit("Result"), taul::qualifier::none);
    sw.pos(5757);
    sw.name(taul::str::lit("R_ARROW"));
    sw.pos(5765);
    sw.name(taul::str::lit("TypeSpec"));
    sw.pos(5757);
    sw.close();
    sw.pos(5817);
    sw.ppr(taul::str::lit("Block"), taul::qualifier::none);
    sw.pos(5817);
    sw.name(taul::str::lit("L_CURLY"));
    sw.pos(5829);
    sw.kleene_star();
    sw.pos(5825);
    sw.name(taul::str::lit("Stmt"));
    sw.pos(5829);
    sw.close();
    sw.pos(5831);
    sw.name(taul::str::lit("R_CURLY"));
    sw.pos(5817);
    sw.close();
    sw.pos(6028);
    sw.ppr(taul::str::lit("Stmt"), taul::qualifier::none);
    sw.pos(6028);
    sw.name(taul::str::lit("Decl"));
    sw.pos(6070);
    sw.alternative();
    sw.pos(6072);
    sw.name(taul::str::lit("ExprStmt"));
    sw.pos(6118);
    sw.alternative();
    sw.pos(6120);
    sw.name(taul::str::lit("IfStmt"));
    sw.pos(6164);
    sw.alternative();
    sw.pos(6166);
    sw.name(taul::str::lit("LoopStmt"));
    sw.pos(6212);
    sw.alternative();
    sw.pos(6214);
    sw.name(taul::str::lit("BreakStmt"));
    sw.pos(6261);
    sw.alternative();
    sw.pos(6263);
    sw.name(taul::str::lit("ContinueStmt"));
    sw.pos(6313);
    sw.alternative();
    sw.pos(6315);
    sw.name(taul::str::lit("ReturnStmt"));
    sw.pos(6028);
    sw.close();
    sw.pos(6406);
    sw.ppr(taul::str::lit("ExprStmt"), taul::qualifier::none);
    sw.pos(6406);
    sw.name(taul::str::lit("Expr"));
    sw.pos(6417);
    sw.optional();
    sw.pos(6411);
    sw.name(taul::str::lit("Assign"));
    sw.pos(6417);
    sw.close();
    sw.pos(6419);
    sw.name(taul::str::lit("SEMI"));
    sw.pos(6406);
    sw.close();
    sw.pos(6486);
    sw.ppr(taul::str::lit("IfStmt"), taul::qualifier::none);
    sw.pos(6486);
    sw.name(taul::str::lit("IF"));
    sw.pos(6489);
    sw.name(taul::str::lit("L_ROUND"));
    sw.pos(6497);
    sw.name(taul::str::lit("Expr"));
    sw.pos(6502);
    sw.name(taul::str::lit("R_ROUND"));
    sw.pos(6510);
    sw.name(taul::str::lit("Block"));
    sw.pos(6543);
    sw.optional();
    sw.pos(6516);
    sw.sequence();
    sw.pos(6518);
    sw.name(taul::str::lit("ELSE"));
    sw.pos(6523);
    sw.sequence();
    sw.pos(6525);
    sw.name(taul::str::lit("Block"));
    sw.pos(6531);
    sw.alternative();
    sw.pos(6533);
    sw.name(taul::str::lit("IfStmt"));
    sw.pos(6523);
    sw.close();
    sw.pos(6516);
    sw.close();
    sw.pos(6543);
    sw.close();
    sw.pos(6486);
    sw.close();
    sw.pos(6586);
    sw.ppr(taul::str::lit("LoopStmt"), taul::qualifier::none);
    sw.pos(6586);
    sw.name(taul::str::lit("LOOP"));
    sw.pos(6591);
    sw.name(taul::str::lit("Block"));
    sw.pos(6586);
    sw.close();
    sw.pos(6638);
    sw.ppr(taul::str::lit("BreakStmt"), taul::qualifier::none);
    sw.pos(6638);
    sw.name(taul::str::lit("BREAK"));
    sw.pos(6644);
    sw.name(taul::str::lit("SEMI"));
    sw.pos(6638);
    sw.close();
    sw.pos(6690);
    sw.ppr(taul::str::lit("ContinueStmt"), taul::qualifier::none);
    sw.pos(6690);
    sw.name(taul::str::lit("CONTINUE"));
    sw.pos(6699);
    sw.name(taul::str::lit("SEMI"));
    sw.pos(6690);
    sw.close();
    sw.pos(6745);
    sw.ppr(taul::str::lit("ReturnStmt"), taul::qualifier::none);
    sw.pos(6745);
    sw.name(taul::str::lit("RETURN"));
    sw.pos(6756);
    sw.optional();
    sw.pos(6752);
    sw.name(taul::str::lit("Expr"));
    sw.pos(6756);
    sw.close();
    sw.pos(6758);
    sw.name(taul::str::lit("SEMI"));
    sw.pos(6745);
    sw.close();
    sw.pos(7215);
    sw.ppr(taul::str::lit("Expr"), taul::qualifier::none);
    sw.pos(7215);
    sw.name(taul::str::lit("PrimaryExpr"));
    sw.pos(7464);
    sw.kleene_star();
    sw.pos(7308);
    sw.sequence();
    sw.pos(7310);
    sw.name(taul::str::lit("Args"));
    sw.pos(7308);
    sw.close();
    sw.pos(7464);
    sw.close();
    sw.pos(7215);
    sw.close();
    sw.pos(7582);
    sw.ppr(taul::str::lit("PrimaryExpr"), taul::qualifier::none);
    sw.pos(7582);
    sw.name(taul::str::lit("IDENTIFIER"));
    sw.pos(7659);
    sw.alternative();
    sw.pos(7661);
    sw.name(taul::str::lit("Lit"));
    sw.pos(7582);
    sw.close();
    sw.pos(7778);
    sw.ppr(taul::str::lit("Lit"), taul::qualifier::none);
    sw.pos(7778);
    sw.name(taul::str::lit("IntLit"));
    sw.pos(7822);
    sw.alternative();
    sw.pos(7824);
    sw.name(taul::str::lit("UIntLit"));
    sw.pos(7869);
    sw.alternative();
    sw.pos(7871);
    sw.name(taul::str::lit("FloatLit"));
    sw.pos(7917);
    sw.alternative();
    sw.pos(7919);
    sw.name(taul::str::lit("BoolLit"));
    sw.pos(7964);
    sw.alternative();
    sw.pos(7966);
    sw.name(taul::str::lit("CharLit"));
    sw.pos(7778);
    sw.close();
    sw.pos(8058);
    sw.ppr(taul::str::lit("IntLit"), taul::qualifier::none);
    sw.pos(8058);
    sw.name(taul::str::lit("INT_DEC"));
    sw.pos(8066);
    sw.alternative();
    sw.pos(8068);
    sw.name(taul::str::lit("INT_HEX"));
    sw.pos(8076);
    sw.alternative();
    sw.pos(8078);
    sw.name(taul::str::lit("INT_BIN"));
    sw.pos(8058);
    sw.close();
    sw.pos(8127);
    sw.ppr(taul::str::lit("UIntLit"), taul::qualifier::none);
    sw.pos(8127);
    sw.name(taul::str::lit("UINT_DEC"));
    sw.pos(8136);
    sw.alternative();
    sw.pos(8138);
    sw.name(taul::str::lit("UINT_HEX"));
    sw.pos(8147);
    sw.alternative();
    sw.pos(8149);
    sw.name(taul::str::lit("UINT_BIN"));
    sw.pos(8127);
    sw.close();
    sw.pos(8199);
    sw.ppr(taul::str::lit("FloatLit"), taul::qualifier::none);
    sw.pos(8199);
    sw.name(taul::str::lit("FLOAT"));
    sw.pos(8205);
    sw.alternative();
    sw.pos(8207);
    sw.name(taul::str::lit("INF"));
    sw.pos(8211);
    sw.alternative();
    sw.pos(8213);
    sw.name(taul::str::lit("NAN"));
    sw.pos(8199);
    sw.close();
    sw.pos(8258);
    sw.ppr(taul::str::lit("BoolLit"), taul::qualifier::none);
    sw.pos(8258);
    sw.name(taul::str::lit("TRUE"));
    sw.pos(8263);
    sw.alternative();
    sw.pos(8265);
    sw.name(taul::str::lit("FALSE"));
    sw.pos(8258);
    sw.close();
    sw.pos(8312);
    sw.ppr(taul::str::lit("CharLit"), taul::qualifier::none);
    sw.pos(8312);
    sw.name(taul::str::lit("CHAR"));
    sw.pos(8312);
    sw.close();
    sw.pos(8360);
    sw.ppr(taul::str::lit("Assign"), taul::qualifier::none);
    sw.pos(8360);
    sw.name(taul::str::lit("ASSIGN"));
    sw.pos(8367);
    sw.name(taul::str::lit("Expr"));
    sw.pos(8360);
    sw.close();
    sw.pos(8413);
    sw.ppr(taul::str::lit("Args"), taul::qualifier::none);
    sw.pos(8413);
    sw.name(taul::str::lit("L_ROUND"));
    sw.pos(8445);
    sw.optional();
    sw.pos(8421);
    sw.sequence();
    sw.pos(8423);
    sw.name(taul::str::lit("Expr"));
    sw.pos(8442);
    sw.kleene_star();
    sw.pos(8428);
    sw.sequence();
    sw.pos(8430);
    sw.name(taul::str::lit("COMMA"));
    sw.pos(8436);
    sw.name(taul::str::lit("Expr"));
    sw.pos(8428);
    sw.close();
    sw.pos(8442);
    sw.close();
    sw.pos(8421);
    sw.close();
    sw.pos(8445);
    sw.close();
    sw.pos(8447);
    sw.name(taul::str::lit("R_ROUND"));
    sw.pos(8413);
    sw.close();
    sw.pos(8498);
    sw.ppr(taul::str::lit("TypeAnnot"), taul::qualifier::none);
    sw.pos(8498);
    sw.name(taul::str::lit("COLON"));
    sw.pos(8504);
    sw.name(taul::str::lit("TypeSpec"));
    sw.pos(8498);
    sw.close();
    sw.pos(8572);
    sw.ppr(taul::str::lit("TypeSpec"), taul::qualifier::none);
    sw.pos(8572);
    sw.name(taul::str::lit("IDENTIFIER"));
    sw.pos(8572);
    sw.close();
    auto loaded = taul::load(sw.done(), lgr);
    TAUL_LOG_IF(!loaded, lgr, "TAUL fetcher 'yama' backing data didn't initialize properly!");
    return loaded.value();
}
static const taul::grammar _TAUL_SRCGEN_yama_object = _TAUL_SRCGEN_init_yama();

taul::grammar taul::fetchers::yama() noexcept {
    return _TAUL_SRCGEN_yama_object;
}
#endif